// Generated by EmberScript 0.0.7
var get$ = Ember.get;
Em.onLoad('Ember.Application', function (application) {
  application.initializer({
    name: 'ember-auth.module.auth-redirectable',
    before: 'ember-auth-load',
    initialize: function (container, app) {
      app.register('authModule:authRedirectable', get$(get$(Em, 'Auth'), 'AuthRedirectableAuthModule'), { singleton: true });
      return app.inject('authModule:authRedirectable', 'auth', 'auth:main');
    }
  });
  return application.initializer({
    name: 'ember-auth.module.auth-redirectable-load',
    after: 'ember-auth-load',
    initialize: function (container, app) {
      return container.lookup('authModule:authRedirectable');
    }
  });
});// Generated by EmberScript 0.0.7
var get$ = Ember.get;
var set$ = Ember.set;
set$(get$(Em, 'Auth'), 'AuthRedirectableAuthModule', Ember.Object.extend({
  init: function () {
    get$(this, 'auth')._config('authRedirectable', get$(this, '_defaultConfig'));
    null != get$(this, 'config') || set$(this, 'config', get$(this, 'auth')._config('authRedirectable'));
    set$(get$(get$(this, 'auth'), '_handlers'), 'authAccess', []);
    return this.patch();
  },
  _defaultConfig: { route: null },
  patch: function () {
    var self;
    self = this;
    return get$(Em, 'Route').reopen({
      beforeModel: function (queryParams, transition) {
        var this$;
        return get$(self, 'auth')._ensurePromise(this._super.apply(this, arguments)).then((this$ = this, function () {
          var handler, promises, this$1;
          if (get$(get$(self, 'auth'), 'signedIn') || !get$(this$, 'authRedirectable'))
            return;
          if (!(null != transition))
            transition = queryParams;
          promises = [];
          for (var i$ = 0, length$ = get$(get$(get$(self, 'auth'), '_handlers'), 'authAccess').length; i$ < length$; ++i$) {
            handler = get$(get$(get$(self, 'auth'), '_handlers'), 'authAccess')[i$];
            promises.push(handler(transition));
          }
          return get$(Em, 'RSVP').all(promises).then((this$1 = this$, function () {
            return this$1.transitionTo(get$(get$(self, 'config'), 'route'));
          }));
        }));
      }
    });
  }
}));